<?php

namespace Tests\Feature;

use App\Client;
use App\User;
use function factory;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ClientTest extends TestCase
{
    use DatabaseMigrations;
    protected $users,$clients;
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->users=factory(User::class)->create();
        $this->clients=factory(Client::class)->create();
        

    }

    /** @test
     * Test que verifica que los que no son usuarios no pueden navegar en clientes
     */
    public function Nadie_puede_navegar_clientes()
{
    $this->withExceptionHandling();

    $this->assertGuest($guard = null);
    $response = $this->get('/clientes');


    $response
        ->assertStatus(302)
        ->assertDontSee('Clientes');

}

    /** @test
     * Test que verifica que solo los usuarios pueden navegar en clientes
     **/
    public function Usuario_puede_navegar_clientes()
    {
        //$this->withExceptionHandling();
        $this->signIn();
        $response=$this->get('/clientes');

        $response
            ->assertSee('Clientes')
            ->assertStatus(200);


    }

    /** @test
     * Test que verifica que el usuario puede crear un cliente
     **/
    public function Usuario_puede_crear_clientes()
    {
        //Verifica que salta mensaje de error en caso de que los campos estén vacios
        $this->users=factory(User::class)->create();
        $this->withExceptionHandling();
        $this->signIn();
        $this->get('/clientes');
        $this->clients->nombre=null;
        $this->clients->apellidos=null;
        $this->clients->nif=null;
        $response=$this->post('/clientes',$this->clients->toArray());
        $response
            ->assertStatus(302)
            ->assertSessionHasErrors(['nombre','apellidos','nif']);

        $this->clients->nombre='Ratoncito';
        $response=$this->post('/clientes',$this->clients->toArray());
        $response
            ->assertStatus(302)
            ->assertSessionHasErrors(['apellidos','nif']);

        $this->clients->apellidos='Perez';
        $response=$this->post('/clientes',$this->clients->toArray());
        $response
            ->assertStatus(302)
            ->assertSessionHasErrors(['nif']);

        //verifica que el nif no es válido
        $this->clients->nif='10002112P';
        $response=$this->post('/clientes',$this->clients->toArray());
        $response
            ->assertStatus(302)
            ->assertSessionHasErrors(['nif']);



        //Verifica que los campos obligatorios son correctos y válidos, y además devuelva el mensaje de cliente creado.
        $this->client = factory(Client::class)->create([
            'nombre' => 'Abigail',
            'apellidos'=> 'Pestaña Rota',
            'nif'=>'10002112X',
            'user'=>$this->users
        ]);


        $response=$this->post('/clientes/',$this->clients->toArray());


        $response
            ->assertStatus(302)
            ->assertSee('clientes')
            //->assertSessionHasErrors('nif')
            ->assertSessionHas('message',['success',__('Cliente creado correctamente')]);



       /* $clients->name='alvaro';
        $response=$this->post('/clientes',$clients->toArray(),['HTTP_REFERER'=>'/clientes']);

        $response
            ->assertStatus(302)
            ->assertSessionHas('message',['success',__('Cliente creado correctamente')]);*/


    }
}
